name: Release Git Commit Generator
on:
  push:
    tags:
      - 'v*.*.*'
  workflow_dispatch:
    inputs:
      tag:
        description: 'Version tag (e.g., v0.2.0)'
        required: true
        default: 'v0.2.0'
jobs:
  build-and-release:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]
        include:
          - os: ubuntu-latest
            asset_name: git-msg-x86_64-linux
            asset_content_type: application/octet-stream
          - os: macos-latest
            asset_name: git-msg-aarch64-macos
            asset_content_type: application/octet-stream
    permissions:
      contents: write
    steps:
      - name: Checkout
        uses: actions/checkout@v5
        with:
          fetch-depth: 0
      - name: Set up Git
        if: github.event_name == 'workflow_dispatch'
        run: |
          git tag ${{ github.event.inputs.tag }} || echo "Tag already exists"
      - name: Get version
        id: get_version
        run: |
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            echo "VERSION=${{ github.event.inputs.tag }}" >> $GITHUB_ENV
          else
            echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_ENV
          fi
          echo "RELEASE_DATE=$(date +'%Y-%m-%d')" >> $GITHUB_ENV
      - name: Generate Changelog
        id: changelog
        run: |
          CURRENT_VERSION_TAG="${{ env.VERSION }}"
          echo "Generating changelog for version $CURRENT_VERSION_TAG"

          git fetch --tags --force

          # Get the commit hash for the current version tag
          CURRENT_TAG_COMMIT=$(git rev-parse "$CURRENT_VERSION_TAG^{commit}")

          PREVIOUS_TAG_NAME=$(git describe --tags --abbrev=0 "${CURRENT_TAG_COMMIT}^" 2>/dev/null || echo "")

          CHANGELOG_RANGE=""
          if [ -n "$PREVIOUS_TAG_NAME" ] && [ "$PREVIOUS_TAG_NAME" != "$CURRENT_VERSION_TAG" ]; then
            echo "Previous tag found: $PREVIOUS_TAG_NAME. Current tag: $CURRENT_VERSION_TAG"
            CHANGELOG_RANGE="${PREVIOUS_TAG_NAME}..${CURRENT_VERSION_TAG}"
          else
            if [ "$PREVIOUS_TAG_NAME" == "$CURRENT_VERSION_TAG" ]; then
              echo "Warning: Previous tag detection resolved to the current tag ('$CURRENT_VERSION_TAG'). This can happen in specific tagging scenarios."
            fi
            echo "No distinct previous tag found, or it's the first release. Generating changelog for all commits leading to $CURRENT_VERSION_TAG."
            # This will list all commits that are ancestors of CURRENT_VERSION_TAG.
            # For the first tag, it lists all commits from the beginning.
            CHANGELOG_RANGE="$CURRENT_VERSION_TAG"
          fi

          echo "Using commit range for git log: $CHANGELOG_RANGE"
          # Format: - Commit subject (short_hash)
          GENERATED_CHANGELOG=$(git log --pretty="format:- %s (%h)" $CHANGELOG_RANGE)

          if [ -z "$GENERATED_CHANGELOG" ]; then
            echo "Changelog is empty. Setting a default message."
            GENERATED_CHANGELOG="- Initial release or no new commits identified for this version."
          fi

          echo "--- Generated Changelog ---"
          echo "$GENERATED_CHANGELOG"
          echo "--------------------------"

          echo "CHANGELOG_CONTENT<<__EOF__" >> $GITHUB_ENV
          echo "$GENERATED_CHANGELOG" >> $GITHUB_ENV
          echo "__EOF__" >> $GITHUB_ENV
      - name: Setup Nix
        uses: cachix/install-nix-action@v31
        with:
          extra_nix_config: |
            experimental-features = nix-command flakes pipe-operators
      - name: Setup project
        run: |
          nix build -L
          cp result/bin/git-msg ${{ matrix.asset_name }}
      - name: Calculate checksums
        id: checksums
        run: |
          echo "SHA256=$(sha256sum ${{ matrix.asset_name }} | awk '{print $1}')" >> $GITHUB_ENV
          echo "MD5=$(md5sum ${{ matrix.asset_name }} | awk '{print $1}')" >> $GITHUB_ENV
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          name: Git Commit Generator ${{ env.VERSION }}
          tag_name: ${{ env.VERSION }}
          draft: false
          prerelease: false
          body: |
            # Git Commit Generator (git-msg) ${{ env.VERSION }}

            Release date: ${{ env.RELEASE_DATE }}

            ## Changelog
            ${{env.CHANGELOG_CONTENT}}

            ## üì¶ Support Platforms
            - Linux (x86_64)
            - macOS (x86_64, arm64)

            ## üîë Features
            - Automatically analyze staged Git changes
            - Generate semantic commit messages using DeepSeek AI
            - Simple and easy-to-use command line interface

            ## üìù Installation

            ### Download
            ```bash
            chmod +x git-msg
            sudo mv git-msg /usr/local/bin/git-msg
            ```

            ### Use Nix
            ```bash
            nix run github:Emin017/git-commit-generator#git-msg
            ```
          files: |
            ${{ matrix.asset_name }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
